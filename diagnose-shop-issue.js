const axios = require('axios');

async function diagnoseShopIssue() {
    console.log('üîç DIAGNOSING SHOP PAGE ISSUE...\n');
    
    try {
        // Step 1: Check if server is running
        console.log('1Ô∏è‚É£ Checking if server is running...');
        try {
            const response = await axios.get('http://localhost:3000/api/products/public');
            console.log('‚úÖ Server is running and responding');
        } catch (error) {
            console.log('‚ùå Server is not running or not accessible');
            console.log('Please start the server with: npm start');
            return;
        }
        
        // Step 2: Check products in database
        console.log('\n2Ô∏è‚É£ Checking products in database...');
        const productsResponse = await axios.get('http://localhost:3000/api/products/public');
        
        if (productsResponse.data && Array.isArray(productsResponse.data)) {
            console.log(`‚úÖ Found ${productsResponse.data.length} products in database`);
            
            productsResponse.data.forEach((product, index) => {
                console.log(`  ${index + 1}. ${product.name} (ID: ${product.id})`);
                console.log(`     Price: $${product.price}`);
                console.log(`     Image: ${product.image_url ? '‚úÖ Has image' : '‚ùå No image'}`);
                if (product.image_url && product.image_url.startsWith('https://res.cloudinary.com')) {
                    console.log(`     Cloudinary: ‚úÖ`);
                } else {
                    console.log(`     Cloudinary: ‚ùå`);
                }
            });
        } else {
            console.log('‚ùå No products found in database');
        }
        
        // Step 3: Test individual product endpoints
        console.log('\n3Ô∏è‚É£ Testing individual product endpoints...');
        if (productsResponse.data && productsResponse.data.length > 0) {
            const firstProduct = productsResponse.data[0];
            try {
                const singleProductResponse = await axios.get(`http://localhost:3000/api/products/public/${firstProduct.id}`);
                console.log(`‚úÖ Individual product endpoint working for ID ${firstProduct.id}`);
            } catch (error) {
                console.log(`‚ùå Individual product endpoint failed for ID ${firstProduct.id}`);
            }
        }
        
        // Step 4: Check if shop page is accessible
        console.log('\n4Ô∏è‚É£ Checking if shop page is accessible...');
        try {
            const shopPageResponse = await axios.get('http://localhost:3000/pages/shop.html');
            console.log('‚úÖ Shop page is accessible');
        } catch (error) {
            console.log('‚ùå Shop page is not accessible');
            console.log('Error:', error.message);
        }
        
        // Step 5: Provide troubleshooting steps
        console.log('\nüìã TROUBLESHOOTING STEPS FOR USER:');
        console.log('1. Clear browser cache and cookies');
        console.log('2. Open browser developer tools (F12)');
        console.log('3. Go to Console tab and look for JavaScript errors');
        console.log('4. Go to Network tab and check if API calls are being made');
        console.log('5. Visit: http://localhost:3000/pages/shop.html');
        console.log('6. Check if you see any products displayed');
        console.log('7. If no products, check the browser console for errors');
        
        console.log('\nüîß POSSIBLE ISSUES AND SOLUTIONS:');
        console.log('‚Ä¢ Browser caching: Clear cache and reload page');
        console.log('‚Ä¢ JavaScript errors: Check browser console for errors');
        console.log('‚Ä¢ Network issues: Check if localhost:3000 is accessible');
        console.log('‚Ä¢ Wrong URL: Make sure you are visiting /pages/shop.html');
        console.log('‚Ä¢ CORS issues: Check browser console for CORS errors');
        
        console.log('\nüìä CURRENT SYSTEM STATUS:');
        console.log(`‚Ä¢ Server: ‚úÖ Running`);
        console.log(`‚Ä¢ Database: ‚úÖ ${productsResponse.data ? productsResponse.data.length : 0} products`);
        console.log(`‚Ä¢ API: ‚úÖ Responding correctly`);
        console.log(`‚Ä¢ Cloudinary: ‚úÖ Images uploaded successfully`);
        
        if (productsResponse.data && productsResponse.data.length > 0) {
            console.log('\n‚úÖ THE BACKEND IS WORKING PERFECTLY!');
            console.log('The issue is likely in the frontend display.');
            console.log('Please check the browser console for JavaScript errors.');
        } else {
            console.log('\n‚ùå NO PRODUCTS IN DATABASE');
            console.log('This explains why nothing is showing on the shop page.');
            console.log('Please create some products through the admin interface.');
        }
        
    } catch (error) {
        console.error('‚ùå Diagnostic failed:', error.message);
        if (error.response) {
            console.error('Response status:', error.response.status);
            console.error('Response data:', error.response.data);
        }
    }
}

// Run the diagnostic
diagnoseShopIssue(); 